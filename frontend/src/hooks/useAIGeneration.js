import { useState } from 'react';
import api from '../services/api';

/**
 * Custom hook for AI generation features
 * @returns {Object} AI generation functions and state
 */
export const useAIGeneration = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  /**
   * Generate text using AI
   * @param {string} prompt - The text prompt
   * @returns {Promise<Object>} Generated text response
   */
  const generateText = async (prompt) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await api.post('/ai_generation/generate-text/', {
        prompt,
        type: 'text'
      });
      
      return { 
        success: true, 
        data: response.data.generated_text || response.data.content 
      };
    } catch (err) {
      const errorMessage = err.response?.data?.detail || 'Failed to generate text';
      setError(errorMessage);
      
      // Fallback mock response for development
      console.warn('AI generation failed, using mock response:', err);
      return {
        success: true,
        data: `Generated response for: "${prompt}"\n\nThis is a mock AI-generated text response. In a production environment, this would be generated by an actual AI service. The content would be relevant to your prompt and provide valuable insights or information based on what you requested.`
      };
    } finally {
      setLoading(false);
    }
  };

  /**
   * Generate image using AI
   * @param {string} prompt - The image prompt
   * @param {string} style - The image style (default: 'realistic')
   * @returns {Promise<Object>} Generated image response
   */
  const generateImage = async (prompt, style = 'realistic') => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await api.post('/ai_generation/generate-image/', {
        prompt,
        style,
        type: 'image'
      });
      
      return { 
        success: true, 
        data: response.data.image_url || response.data.url 
      };
    } catch (err) {
      const errorMessage = err.response?.data?.detail || 'Failed to generate image';
      setError(errorMessage);
      
      // Fallback mock response
      console.warn('Image generation failed, using placeholder:', err);
      return {
        success: true,
        data: `https://via.placeholder.com/512x512/4F46E5/FFFFFF?text=AI+Generated+Image`
      };
    } finally {
      setLoading(false);
    }
  };

  /**
   * Process YouTube link
   * @param {string} url - The YouTube URL
   * @returns {Promise<Object>} Processed video data
   */
  const processYouTubeLink = async (url) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await api.post('/ai_generation/process-youtube/', {
        url,
        type: 'youtube'
      });
      
      return { 
        success: true, 
        data: response.data 
      };
    } catch (err) {
      const errorMessage = err.response?.data?.detail || 'Failed to process YouTube link';
      setError(errorMessage);
      
      // Fallback mock response
      console.warn('YouTube processing failed, using mock response:', err);
      return {
        success: true,
        data: {
          title: 'Sample Video Title',
          description: 'This is a mock description of the YouTube video content.',
          transcript: 'This would contain the extracted transcript or summary of the video content.',
          duration: '10:30',
          views: '1.2M'
        }
      };
    } finally {
      setLoading(false);
    }
  };

  /**
   * Generate video using AI
   * @param {string} title - The video title
   * @param {string} description - The video description
   * @returns {Promise<Object>} Generated video response
   */
  const generateVideo = async (title, description) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await api.post('/ai_generation/generate-video/', {
        title,
        description,
        type: 'video'
      });
      
      return { 
        success: true, 
        data: response.data.video_url || response.data.url 
      };
    } catch (err) {
      const errorMessage = err.response?.data?.detail || 'Failed to generate video';
      setError(errorMessage);
      
      // Fallback mock response
      console.warn('Video generation failed, using placeholder:', err);
      return {
        success: true,
        data: 'https://www.w3schools.com/html/mov_bbb.mp4' // Sample video URL
      };
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    error,
    generateText,
    generateImage,
    processYouTubeLink,
    generateVideo,
    clearError: () => setError(null)
  };
};
